{% extends layout ?: "@PayumCore/layout.html.twig" %}

{% block payum_body %}
    {{ parent() }}
<style>
.novalnet-challenge-window-overlay {
    position: fixed;
    width: 100%;
    height: 100% ! important;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.5);
    z-index: 9999;
    cursor: pointer;
}
.nn_cc_form {
   width: 25%;
}
@media only screen and (max-device-width: 999px) {
	.nn_cc_form {
		width: 90%;	
	   display: block;
	   margin: auto;	
	}
}
</style>
<div class="nn_cc_form">
    <form action="{{ actionUrl|default('') }}" method="POST">
        <h1>Credit Card</h1>
        <input type="hidden" id="nn_test_mode" value={{test_mode}}>
        <input type="hidden" id="nn_pan_hash" name="nn_pan_hash">
        <input type="hidden" id="nn_unique_id" name="nn_unique_id">
        <input type="hidden" id="nn_do_redirect" name="nn_do_redirect">
        <input type="hidden" id="payment_data" value = {{payment_data}}>
        <script src="https://cdn.novalnet.de/js/v2/NovalnetUtility.js"></script>
        <iframe id="novalnet_iframe" frameborder="0" scrolling="no" style="width:100%"></iframe>
        <button id="submit_payment_form" type="submit">Submit Payment</button>
    </form>
</div>
{% endblock %}

{% block payum_javascripts %}
    {{ parent() }}

    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function() {
        $('#submit_payment_form').on('click', function(event) {
            var panHash = $('#nn_pan_hash').val().trim();
            var uniqueId = $('#nn_unique_id').val().trim();

            if (panHash == '' || uniqueId == '') {
                event.preventDefault();
                event.stopImmediatePropagation();
                NovalnetUtility.getPanHash();
            }
        });

        loadIframe();

        function loadIframe() {
            var payment_data = JSON.parse($('#payment_data').val());

            NovalnetUtility.setClientKey(payment_data.client_key);

            var configurationObject = {
                // You can handle the process here, when specific events occur.
                callback: {

                    // Called once the pan_hash (temp. token) created successfully.
                    on_success: function(data) {                    
                        $('#nn_pan_hash').val(data['hash']);
                        $('#nn_unique_id').val(data['unique_id']);
                        $('#nn_do_redirect').val(data['do_redirect']);
                        $('#submit_payment_form').click();
                        return true;
                    },

                    // Called in case of an invalid payment data or incomplete input.
                    on_error: function(data) {
                        if (data['error_message'] !== undefined) {
                            alert(data['error_message']);
                            return false;
                        }
                    },

                    // Called in case the challenge window Overlay (for 3ds2.0) displays
                    on_show_overlay: function(data) {
                        document.getElementById('novalnet_iframe').classList.add("novalnet-challenge-window-overlay");
                    },

                    // Called in case the Challenge window Overlay (for 3ds2.0) hided
                    on_hide_overlay: function(data) {
                        document.getElementById('novalnet_iframe').classList.remove("novalnet-challenge-window-overlay");
                    },
                    on_show_captcha: function(result) {

                    }
                },

                // You can customize your Iframe container styel, text etc.
                iframe: {
                    // It is mandatory to pass the Iframe ID here.  Based on which the entire process will took place.
                    id: "novalnet_iframe",

                    // Set to 1 to make you Iframe input container more compact (default - 0)
                    inline: ((payment_data.inline) ? 1 : 0),

                    // Add the style (css) here for either the whole Iframe contanier or for particular label/input field
                    style: {
                        // The css for the Iframe container
                        container: payment_data.container,

                        // The css for the input field of the Iframe container
                        input: payment_data.input,

                        // The css for the label of the Iframe container
                        label: payment_data.label
                    },

                    // You can customize the text of the Iframe container here
                    text: {
                        // You can customize the text for the Card Holder here
                        card_holder: {
                            // You have to give the Customized label text for the Card Holder Container here
                            label: '',

                            // You have to give the Customized placeholder text for the Card Holder Container here
                            place_holder: ''
                        },
                        card_number: {
                            // You have to give the Customized label text for the Card Number Container here
                            label: '',

                            // You have to give the Customized placeholder text for the Card Number Container here
                            place_holder: ''

                        },
                        expiry_date: {

                            // You have to give the Customized label text for the Expiry Date Container here
                            label: ''
                        },
                        cvc: {
                            // You have to give the Customized label text for the CVC/CVV/CID Container here
                            label: '',

                            // You have to give the Customized placeholder text for the CVC/CVV/CID Container here
                            place_holder: ''
                        }
                    }
                },

                // Add Customer data
                customer: {
                    // Your End-customer's First name which will be prefilled in the Card Holder field
                    first_name: payment_data.customer.first_name,

                    // Your End-customer's Last name which will be prefilled in the Card Holder field
                    last_name: payment_data.customer.last_name,

                    // Your End-customer's Email ID.
                    email: payment_data.customer.email,

                    // Your End-customer's billing address.
                    billing: {

                        // Your End-customer's billing street (incl. House no).
                        street: payment_data.customer.billing.street,

                        // Your End-customer's billing city.
                        city: payment_data.customer.billing.city,

                        // Your End-customer's billing zip.
                        zip: payment_data.customer.billing.zip,

                        // Your End-customer's billing country ISO code.
                        country_code: payment_data.customer.billing.country_code
                    }
                },

                // Add transaction data
                transaction: {
                    // The payable amount that can be charged for the transaction (in minor units), for eg:- Euro in Eurocents (5,22 EUR = 522).
                    amount: payment_data.transaction.amount,

                    // The three-character currency code as defined in ISO-4217.
                    currency: payment_data.transaction.currency,

                    // Set to 1 for the TEST transaction (default - 0).
                    test_mode: $('#nn_test_mode').val(),
                    
                    // Set to 1 for the enforce 3d transaction (default - 0).
                    enforce_3d: ((payment_data.enforce_3d) ? 1 : 0)
                },
                custom: {
                    lang: payment_data.custom.lang
                }
            }

            NovalnetUtility.createCreditCardForm(configurationObject);
        }

    });
    </script>

{% endblock %}
